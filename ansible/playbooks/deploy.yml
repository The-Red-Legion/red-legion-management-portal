---
- name: Deploy Red Legion Website
  hosts: web_servers
  become: yes
  gather_facts: yes
  
  vars:
    app_service_name: "{{ app_name }}-backend"
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
      tags: setup

    - name: Install system dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - nginx
          - curl
          - git
          - supervisor
          - postgresql-client
        state: present
      tags: setup

    - name: Create application user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        createhome: yes
      tags: setup

    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      tags: setup

    - name: Stop existing application service
      systemd:
        name: "{{ app_service_name }}"
        state: stopped
      ignore_errors: yes
      tags: deploy

    - name: Remove existing virtual environment to avoid permission issues
      file:
        path: "{{ app_directory }}/venv"
        state: absent
      tags: deploy

    - name: Copy application files
      synchronize:
        src: "{{ playbook_dir }}/../../deployment-package/"
        dest: "{{ app_directory }}/"
        delete: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=node_modules"
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--exclude=venv"
      become_user: "{{ app_user }}"
      tags: deploy

    - name: Set correct ownership for application files
      file:
        path: "{{ app_directory }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes
      tags: deploy

    - name: Create Python virtual environment
      command: python3 -m venv "{{ app_directory }}/venv"
      become_user: "{{ app_user }}"
      args:
        creates: "{{ app_directory }}/venv/bin/activate"
      tags: deploy

    - name: Install Python requirements
      pip:
        requirements: "{{ app_directory }}/requirements.txt"
        virtualenv: "{{ app_directory }}/venv"
        virtualenv_command: "python3 -m venv"
        state: present
      become_user: "{{ app_user }}"
      register: pip_install_result
      tags: deploy

    - name: Show pip installation result
      debug:
        var: pip_install_result
      tags: deploy

    - name: Verify asyncpg installation
      command: "{{ app_directory }}/venv/bin/python -c 'import asyncpg; print(asyncpg.__version__)'"
      become_user: "{{ app_user }}"
      register: asyncpg_test
      tags: deploy

    - name: Show asyncpg verification
      debug:
        var: asyncpg_test
      tags: deploy

    - name: Verify reportlab installation
      command: "{{ app_directory }}/venv/bin/python -c 'import reportlab; print(reportlab.__version__)'"
      become_user: "{{ app_user }}"
      register: reportlab_test
      tags: deploy

    - name: Show reportlab verification
      debug:
        var: reportlab_test
      tags: deploy

    - name: Verify aiohttp installation
      command: "{{ app_directory }}/venv/bin/python -c 'import aiohttp; print(aiohttp.__version__)'"
      become_user: "{{ app_user }}"
      register: aiohttp_test
      tags: deploy

    - name: Show aiohttp verification
      debug:
        var: aiohttp_test
      tags: deploy

    - name: Create .env file from template
      template:
        src: env.j2
        dest: "{{ app_directory }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0640'
      tags: config

    - name: Create systemd service file
      template:
        src: systemd-service.j2
        dest: "/etc/systemd/system/{{ app_service_name }}.service"
        mode: '0644'
      notify:
        - reload systemd
        - restart app service
      tags: config

    - name: Create nginx configuration
      template:
        src: nginx.j2
        dest: "/etc/nginx/sites-available/{{ app_name }}"
        mode: '0644'
      notify: reload nginx
      tags: config

    - name: Enable nginx site
      file:
        src: "/etc/nginx/sites-available/{{ app_name }}"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}"
        state: link
      notify: reload nginx
      tags: config

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx
      tags: config

    - name: Test nginx configuration
      command: nginx -t
      changed_when: false
      tags: config

    - name: Force nginx reload
      systemd:
        name: nginx
        state: reloaded
      tags: config

    - name: Check application service status
      command: systemctl status {{ app_service_name }}
      register: service_status
      ignore_errors: yes
      tags: debug

    - name: Show service status
      debug:
        var: service_status.stdout_lines
      tags: debug

    - name: Check nginx sites enabled
      command: ls -la /etc/nginx/sites-enabled/
      register: nginx_sites
      tags: debug

    - name: Show nginx sites enabled
      debug:
        var: nginx_sites.stdout_lines
      tags: debug

    - name: Check service logs
      command: journalctl -u {{ app_service_name }} --lines=50 --no-pager
      register: service_logs
      tags: debug

    - name: Show service logs
      debug:
        var: service_logs.stdout_lines
      tags: debug

    - name: Stop service to clear failed state
      systemd:
        name: "{{ app_service_name }}"
        state: stopped
      tags: debug

    - name: Reset service failure count
      command: systemctl reset-failed "{{ app_service_name }}"
      ignore_errors: yes
      tags: debug

    - name: Start service with fresh dependencies
      systemd:
        name: "{{ app_service_name }}"
        state: started
        daemon_reload: yes
        enabled: yes
      tags: deploy

    - name: Wait for service to start
      wait_for:
        port: "{{ backend_port }}"
        host: "127.0.0.1"
        delay: 5
        timeout: 30
      tags: deploy

    - name: Check fresh service logs after restart
      command: journalctl -u {{ app_service_name }} --since "5 minutes ago" --no-pager
      register: fresh_service_logs
      tags: debug

    - name: Show fresh service logs
      debug:
        var: fresh_service_logs.stdout_lines
      tags: debug

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart app service
      systemd:
        name: "{{ app_service_name }}"
        state: restarted
        enabled: yes

    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded
        enabled: yes
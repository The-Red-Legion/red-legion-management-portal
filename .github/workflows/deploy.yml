name: Deploy Red Legion Management Portal

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual deployment

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to GCP Web Server
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Create deployment package
      run: |
        # Create deployment directory structure
        mkdir -p deployment-package/backend
        mkdir -p deployment-package/frontend/dist
        mkdir -p deployment-package/static
        
        # Copy backend files
        cp -r backend/* deployment-package/backend/
        
        # Copy built frontend
        cp -r frontend/dist/* deployment-package/frontend/dist/
        
        # Copy static files
        cp -r static/* deployment-package/static/ 2>/dev/null || true
        
        # Copy requirements and other config files
        cp requirements.txt deployment-package/
        cp .env.example deployment-package/

    - name: Deploy with GCloud
      run: |
        # Copy deployment package to VM
        gcloud compute scp --recurse deployment-package/* ubuntu@arccorp-web-server:/tmp/deployment/ --zone us-central1-a
        
        # Deploy using gcloud ssh
        gcloud compute ssh ubuntu@arccorp-web-server --zone us-central1-a --command "
          # Stop existing service
          sudo systemctl stop red-legion-management-portal-backend || true

          # Backup and replace application files
          sudo rm -rf /opt/red-legion-management-portal/backup || true
          sudo mkdir -p /opt/red-legion-management-portal/backup || true
          sudo cp -r /opt/red-legion-management-portal/* /opt/red-legion-management-portal/backup/ 2>/dev/null || true
          sudo find /opt/red-legion-management-portal -mindepth 1 -not -path '*/backup*' -delete || true
          sudo cp -r /tmp/deployment/* /opt/red-legion-management-portal/
          sudo chown -R ubuntu:ubuntu /opt/red-legion-management-portal
          
          # Create virtual environment and install requirements
          cd /opt/red-legion-management-portal
          sudo -u ubuntu python3 -m venv venv
          sudo -u ubuntu ./venv/bin/pip install -r requirements.txt

          # Create environment file
          sudo tee /opt/red-legion-management-portal/.env > /dev/null <<EOF
        DATABASE_URL='${{ secrets.DATABASE_URL }}'
        BOT_API_URL='${{ secrets.BOT_API_INTERNAL_URL }}'
        DOMAIN_NAME='${{ secrets.DOMAIN_NAME }}'
        DISCORD_CLIENT_ID='${{ secrets.DISCORD_CLIENT_ID }}'
        DISCORD_CLIENT_SECRET='${{ secrets.DISCORD_CLIENT_SECRET }}'
        DISCORD_REDIRECT_URI='http://dev.redlegion.gg/api/auth/discord/callback'
        FRONTEND_URL='http://dev.redlegion.gg'
        EOF
        
          # Fix permissions
          sudo chown ubuntu:ubuntu /opt/red-legion-management-portal/.env
          sudo chmod 640 /opt/red-legion-management-portal/.env

          # Create systemd service file
          sudo tee /etc/systemd/system/red-legion-management-portal-backend.service > /dev/null <<'SERVICE_EOF'
        [Unit]
        Description=Red Legion Management Portal Backend
        After=network.target
        Wants=network.target

        [Service]
        Type=simple
        User=ubuntu
        Group=ubuntu
        WorkingDirectory=/opt/red-legion-management-portal/backend
        Environment=PATH=/opt/red-legion-management-portal/venv/bin
        Environment=PYTHONPATH=/opt/red-legion-management-portal/backend
        EnvironmentFile=-/opt/red-legion-management-portal/.env
        # ExecStartPre=/bin/bash -c 'cd /opt/red-legion-management-portal/backend && /opt/red-legion-management-portal/venv/bin/python startup_check.py'
        ExecStart=/opt/red-legion-management-portal/venv/bin/python enhanced_main.py
        ExecReload=/bin/kill -HUP \$MAINPID
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=red-legion-backend
        KillMode=mixed
        TimeoutStopSec=5
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF

          # Set proper permissions for backend files
          sudo chown -R ubuntu:ubuntu /opt/red-legion-management-portal
          sudo chmod +x /opt/red-legion-management-portal/backend/startup_check.py
          sudo chmod +x /opt/red-legion-management-portal/backend/main.py

          # Reload systemd and configure service
          sudo systemctl daemon-reload

          # Don't overwrite nginx config - the PHP website deployment handles this
          # The PHP site config already includes the /management/ proxy routes
          echo 'Nginx configuration is managed by the PHP website deployment'
          
          # Stop existing service if running
          sudo systemctl stop red-legion-management-portal-backend || true

          # Start and enable the service
          sudo systemctl enable red-legion-management-portal-backend
          sudo systemctl start red-legion-management-portal-backend

          # Wait for service to start and check status with detailed output
          sleep 8
          echo '=== Service Status ==='
          sudo systemctl status red-legion-management-portal-backend --no-pager -l

          echo '=== Service Logs ==='
          sudo journalctl -u red-legion-management-portal-backend --no-pager -l --since='5 minutes ago'

          echo '=== Testing Backend Connectivity ==='
          curl -f http://127.0.0.1:8000/ping || echo 'Backend not responding on localhost'

          echo '=== Port Check ==='
          sudo netstat -tlnp | grep :8000 || echo 'Port 8000 not listening'
        "

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "Web server should be accessible at: http://34.28.1.154:8000"
        echo "Domain: ${{ secrets.DOMAIN_NAME }}"
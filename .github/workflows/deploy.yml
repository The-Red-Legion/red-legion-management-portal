name: Deploy Red Legion Website

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual deployment

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to GCP Web Server
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Create deployment package
      run: |
        # Create deployment directory structure
        mkdir -p deployment-package/backend
        mkdir -p deployment-package/frontend/dist
        mkdir -p deployment-package/static
        
        # Copy backend files
        cp -r backend/* deployment-package/backend/
        
        # Copy built frontend
        cp -r frontend/dist/* deployment-package/frontend/dist/
        
        # Copy static files
        cp -r static/* deployment-package/static/ 2>/dev/null || true
        
        # Copy requirements and other config files
        cp requirements.txt deployment-package/
        cp .env.example deployment-package/

    - name: Deploy with GCloud
      run: |
        # Copy deployment package to VM
        gcloud compute scp --recurse deployment-package/* ubuntu@arccorp-web-server:/tmp/deployment/ --zone us-central1-a
        
        # Deploy using gcloud ssh
        gcloud compute ssh ubuntu@arccorp-web-server --zone us-central1-a --command "
          # Stop existing service
          sudo systemctl stop red-legion-website-backend || true
          
          # Backup and replace application files
          sudo rm -rf /opt/red-legion-website/backup || true
          sudo mkdir -p /opt/red-legion-website/backup || true
          sudo cp -r /opt/red-legion-website/* /opt/red-legion-website/backup/ 2>/dev/null || true
          sudo find /opt/red-legion-website -mindepth 1 -not -path '*/backup*' -delete || true
          sudo cp -r /tmp/deployment/* /opt/red-legion-website/
          sudo chown -R ubuntu:ubuntu /opt/red-legion-website
          
          # Create virtual environment and install requirements
          cd /opt/red-legion-website
          sudo -u ubuntu python3 -m venv venv
          sudo -u ubuntu ./venv/bin/pip install -r requirements.txt
          
          # Create environment file
          sudo tee /opt/red-legion-website/.env > /dev/null <<EOF
        DATABASE_URL='${{ secrets.DATABASE_URL }}'
        BOT_API_URL='${{ secrets.BOT_API_INTERNAL_URL }}'
        DOMAIN_NAME='${{ secrets.DOMAIN_NAME }}'
        DISCORD_CLIENT_ID='${{ secrets.DISCORD_CLIENT_ID }}'
        DISCORD_CLIENT_SECRET='${{ secrets.DISCORD_CLIENT_SECRET }}'
        DISCORD_REDIRECT_URI='${{ secrets.DISCORD_REDIRECT_URI }}'
        FRONTEND_URL='https://dev.redlegion.gg'
        EOF
        
          # Fix permissions
          sudo chown ubuntu:ubuntu /opt/red-legion-website/.env
          sudo chmod 640 /opt/red-legion-website/.env
          
          # Configure nginx with proper settings
          sudo tee /etc/nginx/sites-available/default > /dev/null <<'NGINX_EOF'
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name _;

            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection \"1; mode=block\";
            add_header Referrer-Policy strict-origin-when-cross-origin;

            # Gzip compression
            gzip on;
            gzip_vary on;
            gzip_min_length 1024;
            gzip_proxied any;
            gzip_comp_level 6;
            gzip_types
                text/plain
                text/css
                text/xml
                text/javascript
                application/json
                application/javascript
                application/xml+rss
                application/atom+xml
                image/svg+xml;

            # Serve static files directly
            location /static/ {
                alias /opt/red-legion-website/static/;
                expires 1y;
                add_header Cache-Control \"public, immutable\";
            }

            # Serve frontend static files
            location /assets/ {
                alias /opt/red-legion-website/frontend/dist/assets/;
                expires 1y;
                add_header Cache-Control \"public, immutable\";
            }

            # Explicit API routes - strip /api prefix and forward to backend
            location /api/ {
                rewrite ^/api/(.*) /\$1 break;
                proxy_pass http://127.0.0.1:8000;
                proxy_http_version 1.1;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_read_timeout 300;
                proxy_connect_timeout 300;
                proxy_send_timeout 300;
            }

            # Auth routes - forward to backend (more specific, must come BEFORE / route)
            location /auth/ {
                proxy_pass http://127.0.0.1:8000;
                proxy_http_version 1.1;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_read_timeout 300;
                proxy_connect_timeout 300;
                proxy_send_timeout 300;
            }

            # Frontend routes (Vue.js SPA) - catch-all, must come LAST
            location / {
                root /opt/red-legion-website/frontend/dist;
                try_files \$uri \$uri/ /index.html;
            }

            # Health check endpoint
            location /health {
                proxy_pass http://127.0.0.1:8000;
                access_log off;
            }

            # Block common attack patterns
            location ~* \\.(env|git|svn)\$ {
                deny all;
                return 404;
            }
        }
        NGINX_EOF
          
          # Test and reload nginx
          sudo nginx -t
          sudo systemctl reload nginx
          
          # Start the service
          sudo systemctl start red-legion-website-backend
          sudo systemctl enable red-legion-website-backend
          
          # Wait for service to start and check status
          sleep 5
          sudo systemctl status red-legion-website-backend
        "

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "Web server should be accessible at: http://34.28.1.154:8000"
        echo "Domain: ${{ secrets.DOMAIN_NAME }}"